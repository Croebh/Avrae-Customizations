embed

<drac2>
query    = &ARGS& or ['']
maxWidth = int(get('width',75))
gSource  = query[0] if get_gvar(query[0]) else ""
gvar     = get_gvar(gSource) if gSource else ""
help     = query[0].lower() in ['help', '?']

helpDesc = f"""This alias allows you to 'browse' `character()`, gvars, cvars, and combat.
Once you're in the mode you want, you can make a search through different levels of the selected object using space separated search terms. This alias has fuzzy-search-like behaviour.

**Note:** There are many things in both the SimpleCombatant and character() models that are *not* exactly as they appear in this alias. Specifically things like Resistances, where I have, in this alias, reconstructed them as dicts. The code in the title of the embed should still function to get the information.

**__Examples__**

`{ctx.prefix}browse skills acro` will bring you to `character().skills.acrobatics`, and display the value.
`{ctx.prefix}browse att 0 na` will bring you to `character().attacks[0].name`, and display the name of your first attack.
`{ctx.prefix}browse combat or1 ac` will bring you to `combat().get_combatant('or1').ac`, displaying the current ac of OR1.
`{ctx.prefix}browse ctx author disp` will show you `ctx.author.display_name`, displaying your nickname on that server.

**__Modes__**

`{ctx.prefix}browse [search]` - Browses your characters `character()`
`{ctx.prefix}browse <gvarid> [search]` - Browses that gvar, and loads it as a json if it is one
`{ctx.prefix}browse cvar <cvarname> [search]` - Browses that cvar, and loads it as a json if it is one
`{ctx.prefix}browse combat [search]` - Browses the channels `{ctx.prefix}init` by combatant.
`{ctx.prefix}browse <ctx|context> [search]` - Browses the `ctx` context model."""

skillList = ["acrobatics", "animalHandling", "arcana", "athletics", "deception",
             "history", "initiative", "insight", "intimidation", "investigation",
             "medicine", "nature", "perception", "performance", "persuasion",
             "religion", "sleightOfHand", "stealth", "survival", "strength",
             "dexterity", "constitution", "intelligence", "wisdom", "charisma"]

Combat={combatant.name: {
         "name": combatant.name,
         "ac": combatant.ac,
         "hp": combatant.hp,
         "init": combatant.init,
         "initmod": combatant.initmod,
         "max_hp": combatant.max_hp,
         "temp_hp": combatant.temp_hp,
         "note": combatant.note,
         "hp_str": combatant.hp_str(),
         "type": combatant.type,
         "race": combatant.race,
         "creature_type": combatant.creature_type,
         "monster_name": combatant.monster_name,
         "levels": dict([("total_level", combatant.levels.total_level)] +
                        [(f'get(\\\"{clas[0]}\\\")',clas[1]) for clas in dict(combatant.levels).items()]),
         "resistances": {rType[0]: [{"dtype": rResist.dtype,
                                     "unless": rResist.unless,
                                     "only": rResist.only}
                                    for rResist in rType[1]]
                        for rType in (("resist", combatant.resistances.resist),
                                      ("immune", combatant.resistances.immune),
                                      ("neutral", combatant.resistances.neutral),
                                      ("vuln", combatant.resistances.vuln))},
         "effects": {
          effect.name:{
           "name":effect.name,
           "duration":effect.duration,
           "remaining":effect.remaining,
           "conc":effect.conc,
           "effect":effect.effect,
           "desc":effect.desc,
           "buttons":effect.buttons,
           "attacks":effect.attacks
          }
         for effect in combatant.effects},
         "attacks": [
          {
           "name": attack.name,
           "proper": attack.proper,
           "verb": attack.verb,
           "raw": attack.raw
          }
          for attack in combatant.attacks
         ],
         "stats": {
          "strength": combatant.stats.strength,
          "dexterity": combatant.stats.dexterity,
          "constitution": combatant.stats.constitution,
          "intelligence": combatant.stats.intelligence,
          "wisdom": combatant.stats.wisdom,
          "charisma": combatant.stats.charisma
         },
         "saves": {
          f"get('{stat}')": {
            "adv": combatant.saves.get(stat).adv,
            "bonus": combatant.saves.get(stat).bonus,
            "prof": combatant.saves.get(stat).prof,
            "d20()": combatant.saves.get(stat).d20(),
            "value": combatant.saves.get(stat).value
          }
          for stat in ["strength","dexterity","constitution","intelligence","wisdom","charisma"]
         },
         "skills": {
           skill: {
            "adv": combatant.skills[skill].adv,
            "bonus": combatant.skills[skill].bonus,
            "prof": combatant.skills[skill].prof,
            "d20()": combatant.skills[skill].d20(),
            "value": combatant.skills[skill].value
           }
          for skill in skillList
         },
         "spellbook": {
          "caster_level": combatant.spellbook.caster_level,
          "dc": combatant.spellbook.dc,
          "sab": combatant.spellbook.sab,
          "spell_mod": combatant.spellbook.spell_mod,
          "spells": {
            spell: {
             "dc": spell.dc,
             "mod": spell.mod,
             "name": spell.name,
             "sab": spell.sab
            }
            for spell in combatant.spellbook.spells
          }
         }
        }
        for combatant in combat().combatants} if query[0]=="combat" and combat() else []
Char = character()
Character = {
             "ac": Char.ac,
             "attacks": [
              {
               "name": attack.name,
               "proper": attack.proper,
               "verb": attack.verb,
               "raw": attack.raw
              }
              for attack in Char.attacks
             ],
             "csettings": Char.csettings,
             "consumables": [
                             {"name": counter.name,
                              "min": counter.min,
                              "max": counter.max,
                              "reset_on": counter.reset_on,
                              "value": counter.value,
                              "reset_by": counter.reset_by,
                              "reset_to": counter.reset_to,
                              "title": counter.title,
                              "desc": counter.desc,
                              "display_type": counter.display_type}
                            for counter in Char.consumables],
             "owner": Char.owner,
             "upstream": Char.upstream,
             "sheet_type": Char.sheet_type,
             "background": Char.background,
             "hp": Char.hp,
             "hp_str()": Char.hp_str(),
             "levels": dict([("total_level", Char.levels.total_level)] + 
                            [(f'get(\\\"{clas[0]}\\\")',clas[1]) for clas in dict(Char.levels).items()]),
             "max_hp": Char.max_hp,
             "name": Char.name,
             "race": Char.race,
             "resistances": {rType[0]: [{"dtype": rResist.dtype,
                                        "unless": rResist.unless,
                                        "only": rResist.only}
                                       for rResist in rType[1]]
                            for rType in (("resist", Char.resistances.resist),
                                          ("immune", Char.resistances.immune),
                                          ("neutral", Char.resistances.neutral),
                                          ("vuln", Char.resistances.vuln))},
             "cvars": Char.cvars,
             "saves": {
              f"get('{stat}')": {
                "adv": Char.saves.get(stat).adv,
                "bonus": Char.saves.get(stat).bonus,
                "prof": Char.saves.get(stat).prof,
                "d20()": Char.saves.get(stat).d20(),
                "value": Char.saves.get(stat).value
              }
              for stat in ["strength","dexterity","constitution","intelligence","wisdom","charisma"]
             },
             "skills": {
               skill: {
                "adv": Char.skills[skill].adv,
                "bonus": Char.skills[skill].bonus,
                "prof": Char.skills[skill].prof,
                "d20()": Char.skills[skill].d20(),
                "value": Char.skills[skill].value
               }
              for skill in skillList
             },
             "spellbook": {
              "caster_level": Char.spellbook.caster_level,
              "dc": Char.spellbook.dc,
              "sab": Char.spellbook.sab,
              "spell_mod": Char.spellbook.spell_mod
              ,"spells": {
              spell: {
               "dc": spell.dc,
               "mod": spell.mod,
               "name": spell.name,
               "sab": spell.sab
              }
              for spell in Char.spellbook.spells
              }
             },
             "stats": {
              "strength": Char.stats.strength,
              "dexterity": Char.stats.dexterity,
              "constitution": Char.stats.constitution,
              "intelligence": Char.stats.intelligence,
              "wisdom": Char.stats.wisdom,
              "charisma": Char.stats.charisma
             },
             "temp_hp": Char.temp_hp
            }

context = {
           "author": {
            "descriminator": ctx.author.discriminator,
            "display_name": ctx.author.display_name,
            "id": ctx.author.id,
            "name": ctx.author.name
           },
           "channel": {
            "id": ctx.channel.id,
            "name": ctx.channel.name,
            "topic": ctx.channel.topic,
            "category": {
             "id": ctx.channel.category.id,
             "name": ctx.channel.category.name
            }
           },
           "guild":
            ({"id": ctx.guild.id,
             "name": ctx.guild.name,
             "servsettings()": ctx.guild.servsettings()}) if ctx.guild else None,
           "prefix": ctx.prefix
          }

cvar = ([x for x in character().cvars if query[1].lower() in x.lower()]+[''])[0] if len(query)>1 and query[0] in 'cvars' else ''
got = get(cvar,"")

if query[0] == "combat":
 current = Combat
elif query[0] in ("context","ctx"):
 current = context
elif got:
 current = got
 if got[0] in '{[':
  loaded = True
  current = load_json(got)
elif not gSource:
 current = Character
else:
 current = gvar
 if gvar[0] in '[{' and gvar[-1] in ']}' and gvar[:2] != '{{':
  loaded = True
  current = load_json(gvar)

query = query[1:] if gSource or query[0]=="combat" else query
key = ''

path = ""
if not gSource and not cvar:
 if Combat:
  path = "`combat().combatants"
  if query:
   path = f"""`combat().get_combatant('{combat().get_combatant(query[0]).name}')"""
 elif query[0] in ("context", "ctx"):
  path = f"`ctx"
 else:
  path = f"{name} - `character()"
elif gSource:
 path = f"`get_gvar(\\\"{gSource}\\\")"
 if get('loaded'):
  path = f"`load_json({path.strip('`')})"
else:
 path = f"`get(\\\"{cvar}\\\")"
 if get('loaded'):
  path = f"`load_json({path.strip('`')})"

for index, item in enumerate(query):
 if typeof(current) == "SafeDict":
  # Loop through keys, priotizing exact matches, then partial matches, then get the first result
  key = (
         [curKey for curKey in current if item and item.lower() == str(curKey).lower()] +
         [curKey for curKey in current if item and item.lower() in str(curKey).lower()] +
         ['']
        )[0]
 elif item.isdigit() and typeof(current) == "SafeList" and int(item) in range(len(current)):
  # Get that index
  key = int(item)

 if key is not None:
  if Combat and index == 0:
    pass
  elif Combat and len(query) > 2 and query[1].lower() in 'effects' and query[2].lower() in str(key).lower():
    path = path[:-8] + f".get_effect('{key}')"
  elif str(key).isdigit():
   path = path + f"[{key}]"
  else:
   path = path + f".{key}"


 if key != '':
  current = current[key]

display = False
if typeof(current)=="SafeDict":
 display = [f'**{key}**: ' + (str(current[key]) if len(str(current[key])) < maxWidth else str(current[key])[:maxWidth] + '...') 
           for key in current.keys()]
elif typeof(current) == "SafeList":
 display = [f'**[{x}]**: {str(current[x])[:maxWidth]}'+('' if len(str(current[x]))<maxWidth else '...')
           for x in range(len(current))]

out = ("\n".join([x for x in display]) if display else str(current)).replace('"', "\\\"")
</drac2>

-title "{{"I browse on point" if help else path.strip('.').replace('..','.').replace('..','.').replace('..','.')+'`'}}"
-desc "{{helpDesc if help else out if len(out)<2000 else f"{out[:1500]}... [truncated due to length]"}}"
{{f""" -f "[Dashboard Link](https://avrae.io/dashboard/gvars?lookup={gSource})" """ if gvar else ""}}
-footer "{{'' if help else f"{ctx.prefix}browse ?"}}"
