{
  "Target": {
    "desc": "A Target effect should only show up as a top-level effect. It designates what creatures to affect.",
    "opt": {
      "target": {
        "\\\"all\\\" or \\\"each\\\" (actions only)": "Affects each of the given (by the `-t` argument) targets.",
        "int (actions only)": "Affects the Nth target (1-indexed).",
        "\\\"self\\\"": "Affects the caster, or the actor the triggering effect is on if run from an IEffect button.",
        "\\\"parent\\\" (IEffect buttons and attacks only)": "If the triggering effect has a parent effect, affects the actor the parent effect is on.",
        "\\\"children\\\" (IEffect buttons and attacks only)": "If the triggering effect has any children effects, affects each actor a child effect is on."
      },
      "effects": "A list of effects that each targeted creature will be subject to.",
      "sortBy": "*optional* - Whether to sort the target list. If not given, targets are processed in the order the `-t` arguments are seen. This does not affect `self` targets.\n\n`hp_asc`: Sorts the targets in order of remaining hit points ascending (lowest HP first, None last).\n`hp_desc`: Sorts the targets in order of remaining hit points descending (highest HP first, None last).",
      "self_target": "*optional* - If `true`, the effect will be added to the caster of the automation as opposed to the target."
    },
    "variables": {
      "target": {
        "type": "AliasStatBlock",
        "desc": "The current target"
      },
      "targetIteration": {
        "type": "int",
        "desc": "If running multiple iterations (i.e. `-rr`), the current iteration (1-indexed)."
      },
      "targetIndex": {
        "type": "int",
        "desc": "The index of the target in the list of targets processed by this effect (0-indexed - first target = `0`, second = `1`, etc.). Self targets and nth-targets (`target: \\\"self\\\"` and `target: int`) will always be 0."
      },
      "targetNumber": {
        "type": "int",
        "desc": "Same as `targetIndex`, but 1-indexed (equivalent to `targetIndex + 1`)."
      }
    },
    "url": "target",
    "ts": "{\n    type: \\\"target\\\";\n    target: \\\"all\\\" | \\\"each\\\" | int | \\\"self\\\" | \\\"parent\\\" | \\\"children\\\";\n    effects: Effect[];\n    sortBy?: \\\"hp_asc\\\" | \\\"hp_desc\\\";\n    self_target?: boolean;\n}"
  },
  "Attack": {
    "desc": "An Attack effect makes an attack roll against a targeted creature. It must be inside a Target effect.",
    "opt": {
      "hit": "A list of effects to execute on a hit.",
      "miss": "A list of effects to execute on a miss.",
      "attackBonus": "*optional* - An IntExpression that details what attack bonus to use (defaults to caster’s spell attack mod).",
      "adv": "*optional* - An IntExpression that details whether the attack has inherent advantage or not. `0` for flat, `1` for Advantage, `2` for Elven Accuracy, `-1` for Disadvantage (Default is flat)."
    },
    "variables": {
      "lastAttackDidHit": {
        "type": "bool",
        "desc": "Whether the attack hit."
      },
      "lastAttackDidCrit": {
        "type": "bool",
        "desc": "If the attack hit, whether it crit."
      },
      "lastAttackRollTotal": {
        "type": "int",
        "desc": "The result of the last to-hit roll (0 if no roll was made)."
      },
      "lastAttackNaturalRoll": {
        "type": "int",
        "desc": "The natural roll of the last to-hit roll (e.g. 10 in 1d20 (10) + 5 = 15; 0 if no roll was made)."
      },
      "lastAttackHadAdvantage": {
        "type": "int",
        "desc": "The advantage type of the last to-hit roll. `0` for flat, `1` for; Advantage, `2` for Elven Accuracy, `-1` for Disadvantage"
      }
    },
    "url": "attack",
    "ts": "{\n    type: \\\"attack\\\";\n    hit: Effect[];\n    miss: Effect[];\n    attackBonus?: IntExpression;\n    adv?: IntExpression;\n}"
  },
  "Save": {
    "desc": "A Save effect forces a targeted creature to make a saving throw. It must be inside a Target effect.",
    "opt": {
      "stat": "The type of saving throw.",
      "fail": "A list of effects to execute on a failed save.",
      "success": "A list of effects to execute on a successful save.",
      "dc": "*optional* - An IntExpression that details what DC to use (defaults to caster’s spell DC).",
      "adv": "*optional* - Whether the saving throw should have advantage by default (`-1` = disadvantage, `1` = advantage, `0` = no advantage)."
    },
    "variables": {
      "lastSaveDidPass": {
        "type": "bool",
        "desc": "Whether the target passed the save."
      },
      "lastSaveDC": {
        "type": "int",
        "desc": "The DC of the last save roll."
      },
      "lastSaveRollTotal": {
        "type": "int",
        "desc": "The result of the last save roll (0 if no roll was made)."
      },
      "lastSaveNaturalRoll": {
        "type": "int",
        "desc": "The natural roll of the last save roll (e.g. `10` in `1d20 (10) + 5 = 15`; 0 if no roll was made)."
      },
      "lastSaveAbility": {
        "type": "str",
        "desc": "The title-case full name of the ability the save was made with (e.g. `\\\"Strength\\\"`, `\\\"Wisdom\\\"`, etc)."
      }
    },
    "url": "save",
    "ts": "{\n    type: \\\"save\\\";\n    stat: \\\"str\\\" | \\\"dex\\\" | \\\"con\\\" | \\\"int\\\" | \\\"wis\\\" | \\\"cha\\\";\n    fail: Effect[];\n    success: Effect[];\n    dc?: IntExpression;\n    adv?: -1 | 0 | 1;\n}"
  },
  "Damage": {
    "desc": "Deals damage to a targeted creature. It must be inside a Target effect.\n\n**Note:** This node can also be used to heal a target; simply use negative damage to supply healing.",
    "opt": {
      "damage": "How much damage to deal. Can use variables defined in a Meta tag.",
      "overheal": "*optional* - Whether this damage should allow a target to exceed its hit point maximum.",
      "higher": "*optional* - How much to add to the damage when a spell is cast at a certain level.",
      "cantripScale": "*optional* - Whether this roll should scale like a cantrip.",
      "fixedValue": "*optional* - If `true`, won’t add any bonuses to damage from `-d` arguments or damage bonus effects."
    },
    "variables": {
      "lastDamage": {
        "type": "int",
        "desc": "The amount of damage dealt."
      }
    },
    "url": "damage",
    "ts": "{\n    type: \\\"damage\\\";\n    damage: AnnotatedString;\n    overheal?: boolean;\n    higher?: {int: string};\n    cantripScale?: boolean;\n    fixedValue?: boolean;\n}"
  },
  "TempHP": {
    "desc": "Sets the target’s THP. It must be inside a Target effect.",
    "opt": {
      "amount": "How much temp HP the target should have. Can use variables defined in a Meta tag.",
      "higher": "*optional* - How much to add to the THP when a spell is cast at a certain level.",
      "cantripScale": "*optional* - Whether this roll should scale like a cantrip."
    },
    "variables": {
      "lastTempHp": {
        "type": "int",
        "desc": "The amount of temp HP granted."
      }
    },
    "url": "temphp",
    "ts": "{\n    type: \\\"temphp\\\";\n    amount: AnnotatedString;\n    higher?: {int: string};\n    cantripScale?: boolean;\n}"
  },
  "IEffect": {
    "desc": "Adds an InitTracker Effect to a targeted creature, if the automation target is in combat. It must be inside a Target effect.\n\n**Note:** If the targeted creature is not in combat, this will display the effects of the initiative effect but not save it on the creature.",
    "opt": {
      "name": "The name of the effect to add.",
      "duration": "*optional, default infinite* - The duration of the effect, in rounds of combat. If this is negative, creates an effect with infinite duration.",
      "effects": "*optional, default no effects* - The effects to add. See [PassiveEffects](https://avrae.readthedocs.io/en/stable/automation_ref.html#passiveeffects)",
      "attacks": "*optional, default no attacks* - The attacks granted by this effect. See [AttackInteraction](https://avrae.readthedocs.io/en/stable/automation_ref.html#attackinteraction)",
      "buttons": "*optional, default no effects* - The buttons granted by this effect. See [ButtonInteraction](https://avrae.readthedocs.io/en/stable/automation_ref.html#buttoninteraction)",
      "end": "*optional, default false* - Whether the effect timer should tick on the end of the turn, rather than start.",
      "conc": "*optional, default false* - Whether the effect requires concentration.",
      "desc": "*optional* - The description of the effect (displays on combatant’s turn).",
      "stacking": "*optional, default false* - If true, if another effect with the same name is found on the target, instead of overwriting, add a child effect with name `{name} x{count}` and no description, duration, concentration, attacks, or buttons.",
      "save_as": "*optional, default None* - If supplied, saves an `IEffectMetaVar` to the automation runtime, which can be used in another IEffect’s `parent` key to set its parent to this effect. Must be a valid identifier.",
      "parent": "*optional, default None* - If supplied, sets the created effect’s parent to the given effect. This must be the name of an existing `IEffectMetaVar`.\n - If `parent` is supplied but the parent effect does not exist, will not set a parent.\n - If `conc` is true, the given parent effect will take priority over the concentration effect.\n - If `stacking` is true and a valid stack parent exists, the stack parent will take priority over the given parent.",
      "target_self": "*optional, default false* - If true, the effect will be applied to the caster of the action, rather than the target.",
      "tick_on_caster": "*optional, default false* - If true, the effect’s duration will be dependent on the caster of the action, rather than the target. For example, a `tick_on_caster` effect with a duration of 1 will last until the target of the *caster’s* next turn, rather than the *target’s*.\n\nIf the caster is not in combat, this has no effect."
    },
    "url": "ieffect",
    "ts": "{\n    type: \\\"ieffect2\\\";\n    name: string;\n    duration?: int | IntExpression;\n    effects?: PassiveEffects;\n    attacks?: AttackInteraction[];\n    buttons?: ButtonInteraction[];\n    end?: boolean;\n    conc?: boolean;\n    desc?: AnnotatedString;\n    stacking?: boolean;\n    save_as?: string;\n    parent?: string;\n    target_self?: boolean;\n    tick_on_caster?: boolean;\n}",
    "variables": {
      "(supplied save_as)": {
        "type": "IEffectMetaVar or None",
        "desc": "A reference to the effect that was added to the target. Use this in another IEffect’s `parent` key to set that IEffect’s parent to the given one."
      }
    }
  },
  "PassiveEffects": {
    "desc": "Used to specify the passive effects granted by an initiative effect.",
    "opt": {
      "attack_advantage": "*optional, default no advantage* - Whether this effect gives the combatant advantage on all attacks. -1 for dis, 1 for adv, 2 for elven accuracy.",
      "to_hit_bonus": "*optional* - A bonus that this effect grants to all of the combatant’s to-hit rolls.",
      "damage_bonus": "*optional* - A bonus that this effect grants to all of the combatant’s damage rolls.",
      "magical_damage": "*optional, default false* - Whether this effect makes all of the combatant’s attacks do magical damage. 0 for false, anything else for true.",
      "silvered_damage": "*optional, default false* - Whether this effect makes all of the combatant’s attacks do silvered damage. 0 for false, anything else for true.",
      "resistances": "*optional* - A list of damage types and optionally modifiers (e.g. “fire”, “nonmagical slashing”) that the combatant should be resistant to while this effect is active.",
      "immunities": "*optional* - A list of damage types and optionally modifiers (e.g. “fire”, “nonmagical slashing”) that the combatant should be immune to while this effect is active.",
      "vulnerabilities": "*optional* - A list of damage types and optionally modifiers (e.g. “fire”, “nonmagical slashing”) that the combatant should be vulnerable to while this effect is active.",
      "ignored_resistances": "*optional* - A list of damage types and optionally modifiers (e.g. “fire”, “nonmagical slashing”) that the combatant should not be resistant, immune, or vulnerable to while this effect is active.",
      "ac_value": "*optional* - A value to set the combatant’s armor class to while this effect is active.\n\n**Note:** If both `ac_value` and `ac_bonus` are specified, the resulting value will be equal to `ac_value + ac_bonus`. If multiple effects specify `ac_value`, the highest value will be used.",
      "ac_bonus": "*optional* - A bonus added to the combatant’s armor class while this effect is active.",
      "max_hp_value": "*optional* - A value to set the combatant’s maximum hit points to while this effect is active.\n\n**Note:** If both `max_hp_value` and `max_hp_bonus` are specified, the resulting value will be equal to `max_hp_value + max_hp_bonus`. If multiple effects specify `max_hp_value`, the highest value will be used.",
      "max_hp_bonus": "*optional* - A bonus added to the combatant’s maximum hit points while this effect is active.",
      "save_bonus": "*optional* - A bonus that this effect grants to all of the combatant’s saving throws.",
      "save_adv": "*optional* - A list of stat names (e.g. `strength`) that the combatant should have advantage on for their respective saving throws while this effect is active. Use `all` as a stat name to specify all stats.",
      "save_dis": "*optional* - A list of stat names (e.g. `strength`) that the combatant should have disadvantage on for their respective saving throws while this effect is active. Use `all` as a stat name to specify all stats.",
      "check_bonus": "*optional* - A bonus that this effect grants to all of the combatant’s skill checks.",
      "check_adv": "*optional* - A list of skill names (e.g. `sleightOfHand`, `strength`) that the combatant should have advantage on for ability checks for while this effect is active. If a base ability is given, the advantage will apply to all skills based on that ability (e.g. strength gives advantage on athletics checks). Use `all` as a stat name to specify all skills.",
      "check_dis": "*optional* - A list of skill names (e.g. `sleightOfHand`, `strength`) that the combatant should have disadvantage on for ability checks for while this effect is active. If a base ability is given, the disadvantage will apply to all skills based on that ability (e.g. `strength` gives disadvantage on athletics checks). Use `all` as a stat name to specify all skills.",
      "dc_bonus": "*optional* - A bonus added to the all of the combatant’s save DCs while this effect is active."
    },
    "url": "PassiveEffects",
    "ts": "{\n    attack_advantage?: IntExpression;\n    to_hit_bonus?: AnnotatedString;\n    damage_bonus?: AnnotatedString;\n    magical_damage?: IntExpression;\n    silvered_damage?: IntExpression;\n    resistances?: AnnotatedString[];\n    immunities?: AnnotatedString[];\n    vulnerabilities?: AnnotatedString[];\n    ignored_resistances?: AnnotatedString[];\n    ac_value?: IntExpression;\n    ac_bonus?: IntExpression;\n    max_hp_value?: IntExpression;\n    max_hp_bonus?: IntExpression;\n    save_bonus?: AnnotatedString;\n    save_adv?: AnnotatedString[];\n    save_dis?: AnnotatedString[];\n    check_bonus?: AnnotatedString;\n    check_adv?: AnnotatedString[];\n    check_dis?: AnnotatedString[];\n    dc_bonus?: IntExpression;\n}"
  },
  "AttackInteraction": {
    "desc": "Used to specify an attack granted by an initiative effect: some automation that appears in the combatant’s `!action list` and can be run with a command.",
    "opt": {
      "attack":"The Attack model is any valid individual entity as exported by the attack editor on the Avrae Dashboard:```ts\n{\n    _v: 2;\n    name: string;\n    automation: Effect[];\n    verb?: string;\n    proper?: boolean;\n    criton?: number;\n    phrase?: string;\n    thumb?: string;\n    extra_crit_damage?: string;\n    list_display_override?: string;\n}```",
      "defaultDC": "*optional* - The default saving throw DC to use when running the automation. If not provided, defaults to the targeted combatant’s default spellcasting DC (or any DC specified in the automation). Use this if the effect’s DC depends on the original caster’s DC, rather than the target’s DC.",
      "defaultAttackBonus": "*optional* - The default attack bonus to use when running the automation. If not provided, defaults to the targeted combatant’s default attack bonus (or any attack bonus specified in the automation). Use this if the effect’s attack bonus depends on the original caster’s attack bonus, rather than the target’s attack bonus.",
      "defaultCastingMod": "*optional* - The default spellcasting modifier to use when running the automation. If not provided, defaults to the targeted combatant’s default spellcasting modifier. Use this if the effect’s spellcasting modifier depends on the original caster’s spellcasting modifier, rather than the target’s spellcasting modifier."
    },
    "url": "attackinteraction",
    "ts": "{\n    attack: Attack;\n    defaultDC?: IntExpression;\n    defaultAttackBonus?: IntExpression;\n    defaultCastingMod?: IntExpression;\n}"
  },
  "ButtonInteraction": {
    "desc": "Used to specify a button that will appear on the targeted combatant’s turn and execute some automation when pressed.\n\n**Note:** Any initiative effects applying an offensive effect to the caster will not be considered when a ButtonInteraction is run, to prevent scenarios where an effect granting a damage bonus to the caster increases the damage done by a damage over time effect and other similar scenarios.\n\nYou may think of this as a ButtonInteraction’s caster being a temporary actor without any active initiative effects.",
    "opt": {
      "automation": "The automation to run when this button is pressed.", 
      "label": "The label displayed on the button.", 
      "verb": "*optional, default “uses {label}”* - The verb to use for the displayed output when the button is pressed (e.g. “is on fire” would display “NAME is on fire!”).", 
      "style": "*optional, default blurple* - The color of the button (1 = blurple, 2 = grey, 3 = green, 4 = red).", 
      "defaultDC": "*optional* - The default saving throw DC to use when running the automation. If not provided, defaults to the targeted combatant’s default spellcasting DC (or any DC specified in the automation). Use this if the effect’s DC depends on the original caster’s DC, rather than the target’s DC.", 
      "defaultAttackBonus": "*optional* - The default attack bonus to use when running the automation. If not provided, defaults to the targeted combatant’s default attack bonus (or any attack bonus specified in the automation). Use this if the effect’s attack bonus depends on the original caster’s attack bonus, rather than the target’s attack bonus.", 
      "defaultCastingMod": "*optional* - The default spellcasting modifier to use when running the automation. If not provided, defaults to the targeted combatant’s default spellcasting modifier. Use this if the effect’s spellcasting modifier depends on the original caster’s spellcasting modifier, rather than the target’s spellcasting modifier."
    },
    "url": "buttoninteraction",
    "ts": "{\n    automation: Effect[];\n    label: AnnotatedString;\n    verb?: AnnotatedString;\n    style?: IntExpression;\n    defaultDC?: IntExpression;\n    defaultAttackBonus?: IntExpression;\n    defaultCastingMod?: IntExpression;\n}"
  },
  "RemoveIEffect": {
    "desc": "Removes the initiative effect that triggered this automation. Only works when run in execution triggered by an initiative effect, such as a [ButtonInteraction](https://avrae.readthedocs.io/en/stable/automation_ref.html#buttoninteraction).",
    "opt": {
      "removeParent": "*optional, default null* - If the removed effect has a parent, whether to remove the parent.\n\n`null` (default) - Do not remove the parent effect.\n\n`\\\"always\\\"` - If the removed effect has a parent, remove it too.\n\n`\\\"if_no_children\\\"` - If the removed effect has a parent and its only remaining child was the removed effect, remove it too."
    },
    "url": "RemoveIEffect",
    "ts": "{\n    type: \\\"remove_ieffect\\\";\n    removeParent?: \\\"always\\\" | \\\"if_no_children\\\";\n}"
  },
  "Roll": {
    "desc": "Rolls some dice and saves the result in a variable. Displays the roll and its name in a Meta field, unless `hidden` is `true`.",
    "opt": {
      "dice": "An AnnotatedString detailing what dice to roll.",
      "name": "What to save the result as.",
      "higher": "*optional* - How much to add to the roll when a spell is cast at a certain level.",
      "cantripScale": "*optional* - Whether this roll should scale like a cantrip.",
      "hidden": "*optional* - If `true`, won’t display the roll in the Meta field, or apply any bonuses from `-d`.",
      "displayName": "The name to display in the Meta field. If left blank, it will use the saved name.",
      "fixedValue": "*optional* - If `true`, won’t add any bonuses to damage from `-d` arguments or damage bonus effects."
    },
    "variables": {
      "(supplied name)": {
        "type": "RollEffectMetaVar",
        "desc": "The result of the roll.\n\n - You can use this in an AnnotatedString to retrieve the simplified result of the roll. Using this variable in an AnnotatedString will always return a string that itself can be rolled.\n - You can use this in an IntExpression to retrieve the roll total.\n - You can compare this variable against a number to determine if the total of the roll equals that number."
      },
      "lastRoll": {
        "type": "int",
        "desc": "The total of the roll."
      }
    },
    "url": "roll",
    "ts": "{\n    type: \\\"roll\\\";\n    dice: AnnotatedString;\n    name: string;\n    higher?: {int: string};\n    cantripScale?: boolean;\n    hidden?: boolean;\n    displayName?: string;\n    fixedValue?: boolean;\n}"
  },
  "Text": {
    "desc": "Outputs a short amount of text in the resulting embed.",
    "opt": {
      "text": "Either:\n\nAn AnnotatedString (the text to display).\n\nAn AbilityReference (see [AbilityReference](https://avrae.readthedocs.io/en/stable/automation_ref.html#abilityreference)). Displays the ability’s description in whole.",
      "title": "*optional* - Allows you to set the name of the field. Defaults to “Effect”"
    },
    "url": "text",
    "ts": "{\n    type: \\\"text\\\";\n    text: AnnotatedString | AbilityReference;\n    title?: string;\n}"
  },
  "Set Variable": {
    "desc": "Saves the result of an `IntExpression` to a variable without displaying anything.",
    "opt": {
      "name": "The name of the variable to save.",
      "value": "The value to set the variable to.",
      "higher": "*optional* - What to set the variable to instead when a spell is cast at a higher level.",
      "onError": "*optional* - If provided, what to set the variable to if the normal value would throw an error."
    },
    "url": "set-variable",
    "ts": "{\n    type: \\\"variable\\\";\n    name: string;\n    value: IntExpression;\n    higher?: {int: IntExpression};\n    onError?: IntExpression;\n}"
  },
  "Condition": {
    "desc": "Run certain effects if a special condition is met, or other effects otherwise.",
    "opt": {
      "condition": "The condition to check.",
      "onTrue": "The effects to run if `condition` is `True` or any non-zero value.",
      "onFalse": "The effects to run if `condition` is `False` or `0`.",
      "errorBehaviour": "How to behave if the condition raises an error:\n`\\\"true\\\"`: Run the `onTrue` effects.\n`\\\"false\\\"`: Run the `onFalse` effects. (*default*)\n`\\\"both\\\"`: Run both the `onTrue` and `onFalse` effects, in that order.\n`\\\"neither\\\"`: Skip this effect.\n`\\\"raise\\\"`: Raise the error and halt execution."
    },
    "url": "condition",
    "ts": "{\n    type: \\\"condition\\\";\n    condition: IntExpression;\n    onTrue: Effect[];\n    onFalse: Effect[];\n    errorBehaviour?: \\\"true\\\" | \\\"false\\\" | \\\"both\\\" | \\\"neither\\\" | \\\"raise\\\";\n}"
  },
  "Use Counter": {
    "desc": "Uses a number of charges of the given counter, and displays the remaining amount and delta.\n\n**Note:** Regardless of the current target, this effect will always use the *caster’s* counter/spell slots!",
    "opt": {
      "counter": "The name of the counter to use (case-sensitive, full match only), or a reference to a spell slot (see [SpellSlotReference](https://avrae.readthedocs.io/en/stable/automation_ref.html#spellslotreference)).",
      "amount": "The number of charges to use. If negative, will add charges instead of using them.",
      "allowOverflow": "*optional, default False* - If False, attempting to overflow/underflow a counter (i.e. use more charges than available or add charges exceeding max) will error instead of clipping to bounds.",
      "errorBehaviour": "*optional, default \\\"warn\\\"* - How to behave if modifying the counter raises an error:\n`null`: All errors are silently consumed.\n`\\\"warn\\\"`: Automation will continue to run, and any errors will appear in the output. (default)\n`\\\"raise\\\"`: Raise the error and halt execution.\nSome, but not all, possible error conditions are:\nThe target does not have counters (e.g. they are a monster)\nThe counter does not exist\n`allowOverflow` is false and the new value is out of bounds",
      "fixedValue": "*optional* - If true, won’t take into account `-amt` arguments."
    },
    "variables": {
      "lastCounterName": {
      "type": "str",
      "desc": "The name of the last used counter. If it was a spell slot, the level of the slot (safe to cast to int, i.e. `int(lastCounterName)`). (`None` on error)."
      },
      "lastCounterRemaining": {
      "type": "int",
      "desc": "The remaining charges of the last used counter (0 on error)."
      },
      "lastCounterUsedAmount": {
      "type": "int",
      "desc": "The amount of the counter successfully used."
      },
      "lastCounterRequestedAmount": {
      "type": "int",
      "desc": "The amount of the counter requested to be used (i.e. the amount specified by automation or requested by `-amt`, regardless of the presence of the `-i` arg)."}
    },
    "url": "use-counter",
    "ts": "{\n    type: \\\"counter\\\";\n    counter: string | SpellSlotReference | AbilityReference;\n    amount: IntExpression;\n    allowOverflow?: boolean;\n    errorBehaviour?: null | \\\"warn\\\" | \\\"raise\\\";\n    fixedValue?: boolean;\n}"
  },
  "SpellSlotReference": {
    "desc": "Used to reference a spell slot in a Use Counter effect.",
    "opt": {
      "slot": "The level of the spell slot to reference (`[1..9]`)."
    },
    "url": "spellslotreference",
    "ts": "{\n    slot: number | IntExpression;\n}"
  },
  "AbilityReference": {
    "desc": "In most cases, an `AbilityReference` should not be constructed manually; use the Automation editor to select an ability instead. A list of valid abilities can be retrieved from the API at `/gamedata/limiteduse`.\n\n**Note:** The Automation Engine will make a best effort at discovering the appropriate counter to use for the given ability - in most cases this won’t affect the chosen counter, but in some cases, it may lead to some unexpected behaviour. Some examples of counter discovery include:\n\nChoosing `Channel Divinity (Paladin)` may discover a counter granted by the Cleric’s Channel Divinity feature\nChoosing `Breath Weapon (Gold)` may discover a counter for a breath weapon of a different color\nChoosing `Sorcery Points (Sorcerer)` may discover a counter granted by the Metamagic Adept feat",
    "opt": {
      "id": "The ID of the ability referenced.",
      "typeId": "The DDB entity type ID of the ability referenced."
    },
    "url": "abilityreference",
    "ts": "{\n    id: number;\n    typeId: number;\n}"
  },
  "Cast Spell": {
    "desc": "Executes the given spell’s automation as if it were immediately cast. Does not use a spell slot to cast the spell. Can only be used at the root of automation. Cannot be used inside a spell’s automation.\n\nThis is usually used in features that cast spells using alternate resources (i.e. Use Counter, Cast Spell).",
    "opt": {
      "id": "The DDB entity id of the spell to cast. Use the `/gamedata/spells` API endpoint to retrieve a list of valid IDs.",
      "level": "*optional* - The (slot) level to cast the spell at.",
      "dc": "*optional* - The saving throw DC to use when casting the spell. If not provided, defaults to the caster’s default spellcasting DC (or any DC specified in the spell automation).",
      "attackBonus": "*optional* - The spell attack bonus to use when casting the spell. If not provided, defaults to the caster’s default spell attack bonus (or any attack bonus specified in the spell automation).",
      "castingMod": "*optional* - The spellcasting modifier to use when casting the spell. If not provided, defaults to the caster’s default spellcasting modifier.",
      "parent": "*optional, default None* - If supplied, sets the spells created effect’s parent to the given effect. This must be the name of an existing `IEffectMetaVar`. Useful for handling concentration."
    },
    "url": "cast-spell",
    "ts": "{\n    type: \\\"spell\\\";\n    id: int;\n    level?: int;\n    dc?: IntExpression;\n    attackBonus?: IntExpression;\n    castingMod?: IntExpression;\n    parent?: string\n}"
  },
  "Ability Check": {
    "desc": "An Ability Check effect forces a targeted creature to make an ability check, optionally as a contest against the caster. It must be inside a Target effect.",
    "opt": {
      "ability":"The ability to make a check for. Must be one of or a list of the following:\n\n\\\"acrobatics\\\",  \\\"animalHandling\\\",  \\\"arcana\\\",  \\\"athletics\\\",  \\\"deception\\\",  \\\"history\\\",  \\\"initiative\\\",  \\\"insight\\\",  \\\"intimidation\\\",  \\\"investigation\\\",  \\\"medicine\\\",  \\\"nature\\\",  \\\"perception\\\",  \\\"performance\\\",  \\\"persuasion\\\",  \\\"religion\\\",  \\\"sleightOfHand\\\",  \\\"stealth\\\",  \\\"survival\\\",  \\\"strength\\\",  \\\"dexterity\\\",  \\\"constitution\\\",  \\\"intelligence\\\",  \\\"wisdom\\\",  \\\"charisma\\\"\n\nIf multiple skills are specified, uses the highest modifier of all the specified skills.",
      "contestAbility":"*optional* - Which ability of the caster’s to make a contest against. Must be one of or a list of the valid skills listed above. If multiple skills are specified, uses the highest modifier of all the specified skills.\n\nMutually exclusive with `dc`.",
      "dc":"*optional* - An IntExpression that specifies the check’s DC. If neither dc nor contestAbility is given, the check will not run either the fail or success nodes.\n\nMutually exclusive with `contestAbility`.",
      "success":"*optional* - A list of effects to execute on a successful check or if the target wins the contest. Requires the `contestAbility` or `dc` attribute to be set.",
      "fail":"*optional* - A list of effects to execute on a failed check or if the target loses the contest. Requires the `contestAbility` or `dc` attribute to be set.",
      "contestTie":"*optional, default success* - Which list of effects to run if the ability contest results in a tie.",
      "adv":"*optional, default 0* - Whether the check should have advantage by default (`-1` = disadvantage, `1` = advantage, `0` = no advantage)."
    },
    "variables": {
      "lastCheckRollTotal": {
        "type": "int",
        "desc": "The result of the last check roll (`0` if no roll was made)."
      },
      "lastCheckNaturalRoll": {
        "type": "int",
        "desc": "The natural roll of the last check roll (e.g. `10` in `1d20 (10) + 5 = 15`; `0` if no roll was made)."
      },
      "lastCheckAbility": {
        "type": "str",
        "desc": "The title-case full name of the rolled skill (e.g. \\\"Animal Handling\\\", \\\"Arcana\\\")."
      },
      "lastCheckDidPass": {
        "type": "bool or None",
        "desc": "If a DC was given, whether the target succeeded the check. If a contest was specified, whether the target won the contest. `None` if no or contest given."
      },
      "lastCheckDC": {
        "type": "int or None",
        "desc": "If a DC was given, the DC of the last save roll. `None` if no DC given."
      },
      "lastContestRollTotal": {
        "type": "int or None",
        "desc": "The result of the caster’s contest roll; `None` if no contest was made."
      },
      "lastContestNaturalRoll": {
        "type": "int or None",
        "desc": "The natural roll of the caster’s contest roll (e.g. 10 in 1d20 (10) + 5 = 15; `None` if no contest was made)."
      },
      "lastContestAbility": {
        "type": "str or None",
        "desc": "The title-case full name of the skill the caster rolled (e.g. \\\"Animal Handling\\\", \\\"Arcana\\\"). `None` if no contest was made."
      },
      "lastContestDidTie": {
        "type": "bool",
        "desc": "Whether a ability contest resulted in a tie."
      }
    },
    "url": "Check",
    "ts": "{\n    type: \\\"check\\\";\n    ability: string | string[];\n    contestAbility?: string | string[];\n    dc?: IntExpression;\n    success?: Effect[];\n    fail?: Effect[];\n    contestTie?: \\\"fail\\\" | \\\"success\\\" | \\\"neither\\\";\n    adv?: -1 | 0 | 1;\n}"
  },
  "AnnotatedString": {
    "desc": "An AnnotatedString is a string that can access saved variables. To access a variable, surround the name in brackets (e.g. `{damage}`). Available variables include:\n\n• Implicit variables from Effects (see relevant effect for a list of variables it provides)\n• Any defined in a `Roll` or `Set Variable` effect\n• All variables from the [Cvar Table](https://avrae.readthedocs.io/en/stable/aliasing/api.html#cvar-table)\n\nThis will replace the bracketed portion with the value of the meta variable.\n\nTo perform math inside an AnnotatedString, surround the formula with two curly braces (e.g. `{{floor(dexterityMod+spell)}}`).",
    "url": "annotatedstring"
  },
  "IntExpression": {
    "desc": "An IntExpression is similar to an AnnotatedString in its ability to use variables and functions. However, it has the following differences:\n\nCurly braces around the expression are not required\n\nAn IntExpression can only contain one expression\n\nThe result of an IntExpression must be an integer.\n\nThese are valid IntExpressions:\n\n• `8 + proficiencyBonus + dexterityMod`\n• `12`\n• `floor(level / 2)`\n\nThese are *not* valid IntExpressions:\n\n• `1d8`\n• `DC {8 + proficiencyBonus + dexterityMod}`",
    "url": "intexpression"
  },
  "Example - Basic Attack": {
    "desc": "A normal attack",
    "url": "id19",
    "syntax": "- type: target\n  target: each\n  effects:\n  - type: attack\n  attackBonus: dexterityMod + proficiencyBonus\n  hit:\n  - type: damage\n    damage: 1d10[piercing]\n  miss: []"
  },
  "Example - Basic Save": {
    "desc": "A spell that requires a Dexterity save for half damage",
    "url": "id20",
    "syntax": "- type: roll\n  dice: 8d6[fire]\n  name: damage\n  higher:\n  '4': 1d6[fire]\n  '5': 2d6[fire]\n  '6': 3d6[fire]\n  '7': 4d6[fire]\n  '8': 5d6[fire]\n  '9': 6d6[fire]\n- type: target\n  target: all\n  effects:\n  - type: save\n  stat: dex\n  fail:\n  - type: damage\n    damage: '{damage}'\n  success:\n  - type: damage\n    damage: ({damage})/2\n- type: text\n  text: Each creature in a 20-foot radius must make a Dexterity saving throw. A target takes 8d6 fire damage on a failed save, or half as much damage on a successful one."
  },
  "Example - Attack & Save": {
    "desc": "An attack from a poisoned blade",
    "url": "attack-save",
    "syntax": "- type: target\n  target: each\n  effects:\n  - type: attack\n  attackBonus: strengthMod + proficiencyBonus\n  hit:\n  - type: damage\n    damage: 1d10[piercing]\n  - type: save\n    stat: con\n    dc: '12'\n    fail:\n    - type: damage\n    damage: 1d6[poison]\n    success: []\n  miss: []\n- type: text\n  text: On a hit, a target must make a DC 12 Constitution saving throw or take 1d6 poison damage."
  },
  "Example - Draining Attack": {
    "desc": "An attack that heals the caster for half the amount of damage dealt",
    "url": "draining-attack",
    "syntax": "- type: variable\n  name: lastDamage\n  value: '0'\n- type: target\n  target: each\n  effects:\n  - type: attack\n  attackBonus: charismaMod + proficiencyBonus\n  hit:\n  - type: damage\n    damage: 3d6[necrotic]\n  miss: []\n- type: target\n  target: self\n  effects:\n  - type: damage\n  damage: -{lastDamage}/2 [heal]\n- type: text\n  text: On a hit, the target takes 3d6 necrotic damage, and you regain hit points equal to half the amount of necrotic damage dealt."
  },
  "Example - Target Health-Based": {
    "desc": "A spell that does different amounts of damage based on whether or not the target is damaged",
    "url": "target-health-based",
    "syntax": "- type: target\n  target: each\n  effects:\n  - type: save\n  stat: wis\n  fail:\n  - type: condition\n    condition: target.hp < target.max_hp\n    onTrue:\n    - type: damage\n    damage: 1d8 [necrotic]\n    onFalse:\n    - type: damage\n    damage: 1d4 [necrotic]\n    errorBehaviour: both\n  success: []\n- type: text\n  text: The target must succeed on a Wisdom saving throw or take 1d4 necrotic damage. If the target is missing any of its hit points, it instead takes 1d8 necrotic damage."
  },
  "Example - Area Draining Effect": {
    "desc": "An effect that heals the caster for the total damage dealt",
    "url": "area-draining-effect",
    "syntax": "- type: variable\n  name: totalDamage\n  value: '0'\n- type: target\n  target: each\n  effects:\n  - type: damage\n  damage: 1d6 [necrotic]\n  - type: variable\n  name: totalDamage\n  value: totalDamage + lastDamage\n- type: target\n  target: self\n  effects:\n  - type: damage\n  damage: -{totalDamage} [heal]\n- type: text\n  text: Each creature within 10 feet of you takes 1d6 necrotic damage. You regain hit points equal to the sum of the necrotic damage dealt."
  },
  "Example - Auto Self-Targetting": {
    "desc": "This will automatically target the caster if no `-t` target is provided. Useful for spells like Mage Armor, which is commonly used on yourself but *can* be used on others.",
    "url": "examples",
    "syntax": "- type: condition\n  condition: any(targets)\n  onTrue:\n  - type: target\n    target: each\n    effects:\n    - type: ieffect\n      name: Mage Armor\n      duration: 4800\n      effects: -ac +3\n  onFalse:\n  - type: target\n    target: self\n    effects:\n    - type: ieffect\n      name: Mage Armor\n      duration: 4800\n      effects: -ac +3\n  errorBehaviour: 'false'"
  },
  "Example - Various Class Calculations": {
    "desc": "Here are some examples of various class calculations: Bardic Die, Monk Die, Sneak Attack, and Warlock Slot",
    "url": "examples",
    "syntax": "- type: variable\n  name: bardLevel\n  value: caster.levels.get('Bard')\n  onError: '0'\n- type: variable\n  name: scaleValue\n  value: 6 + 2 * ((bardLevel>=5)+(bardLevel>=10)+(bardLevel>=15))\n  onError: '6'\n```\n```yaml\n- type: variable\n  name: MonkLevel\n  value: caster.levels.get('Monk')\n  onError: '0'\n- type: variable\n  name: scaleValue\n  value: 4+2*(MonkLevel+1)//6\n  onError: '4'\n```\n```yaml\n- type: variable\n  name: RogueLevel\n  value: caster.levels.get('Rogue')\n  onError: '0'\n- type: variable\n  name: scaleValue\n  value: ceil(RogueLevel)/2\n  onError: ''\n```\n```yaml\n- type: variable\n  name: WarlockLevel\n  value: caster.levels.get('Warlock')\n  onError: '0'\n- type: counter\n  counter:\n    slot: (WarlockLevel >= 9) + (WarlockLevel >= 7) + (WarlockLevel >= 5) + (WarlockLevel>= 3) + 1\n  amount: '1'\n  errorBehaviour: raise\n"
  },
  "Example - Damage Over Time Effect": {
    "desc": "An effect that lights the target on fire, adding two buttons on their turn to take the fire damage and douse themselves.",
    "url": "damage-over-time-effect",
    "syntax": "- type: target\n  target: each\n  effects:\n  - type: ieffect2\n    name: Burning\n    buttons:\n    - label: Burning\n      verb: is on fire\n      style: '4'\n      automation:\n      - type: target\n        target: self\n        effects:\n        - type: damage\n          damage: 1d6 [fire]\n      - type: text\n        text: At the start of each of the target's turns, the target takes 1d6 fire\n          damage.\n    - label: Douse\n      verb: puts themself out\n      automation:\n      - type: remove_ieffect\n      - type: text\n        text: The target can use an action to put themselves out."
  }
}
