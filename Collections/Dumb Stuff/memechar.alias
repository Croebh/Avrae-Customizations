embed
<drac2>
STATS = {
          "str": "Strength",
          "dex": "Dexterity",
          "con": "Constitution",
          "int": "Intelligence",
          "wis": "Wisdom",
          "cha": "Charisma"
        }

CLASSES = {
            "str": ["Fighter", "Barbarian", "Paladin"],
            "dex": ["Rogue", "Monk", "Ranger", "Fighter"],
            "int": ["Wizard", "Artificer"],
            "wis": ["Cleric", "Druid", "Monk", "Ranger"],
            "cha": ["Sorcerer", "Bard", "Warlock", "Paladin"],
            "con": ["Fighter", "Barbarian", "Paladin", "Rogue", 
                    "Monk", "Ranger", "Wizard", "Artificer", 
                    "Cleric", "Druid", "Sorcerer", "Bard", "Warlock"]
          }

EMOJI = {
          "Artificer": "<:classArtificer:787797990680690779>",
          "Barbarian": "<:classBarbarian:1280593993884766350>",
          "Bard": "<:classBard:1280594010712572020>",
          "Cleric": "<:classCleric:1280594027615490048>",
          "Druid": "<:classDruid:1280594042060669078>",
          "Fighter": "<:classFighter:1280594056208060478>",
          "Monk": "<:classMonk:1280594071802613803>",
          "Paladin": "<:classPaladin:1280594088340492338>",
          "Ranger": "<:classRanger:1280594106459881553>",
          "Rogue": "<:classRogue:1280594125258752020>",
          "Sorcerer": "<:classSorcerer:1280594144213078190>",
          "Warlock": "<:classWarlock:1280594161204199569>",
          "Wizard": "<:classWizard:1280594178920812626>",
        }

stats = [i.lower()[:3] for i in &ARGS& if i.lower()[:3] in STATS]
number = int(([20] + [i for i in &ARGS& if i.isdigit()])[-1])

if not stats:
  return f""" -title "Choose your stats!" -desc "`{ctx.prefix}{ctx.alias} <stat> [stat2] [stat3...] [max_classes]`\nIf you add `stats` to the args it will roll stats!" """

set_classes = []
title = []
for stat in stats:
  set_classes.extend(CLASSES[stat])
  title.append(STATS[stat])
set_classes = list({c for c in set_classes})

classes = []
for i in range(number):
  classes.append(set_classes.pop(roll(f"1d{len(set_classes)}-1")))
  if not set_classes:
    break

out = {} 
OUT = []
N   = "\n"

for i in range(1, 21):
  cur = randchoice(classes) 
  out[cur] = out.get(cur, 0) + 1
  OUT.append(EMOJI[cur])

# Connect 4
board = [OUT[i:i+5] for i in range(0, 20, 5)]
possible_wins = []

# Horizontal Wins
for i, hline in enumerate(board, 1):
  cur = list({item for item in hline})
  if len(cur) == 1:
    possible_wins.append(f"**JACKPOT for {cur[0]}, Horizontal line {i}**") 
  else: 
    cur = list({item for item in hline[:4]})
    if len(cur) == 1:
      possible_wins.append(f"Win for {cur[0]}, Horizontal line {i}")
    cur = list({item for item in hline[1:]})
    if len(cur) == 1:
      possible_wins.append(f"Win for {cur[0]}, Horizontal line {i}")

# Vertical Wins
for i, vline in enumerate(range(5), 1):
  cur = list({hline[vline] for hline in board})
  if len(cur) == 1:
    possible_wins.append(f"Win for {cur[0]}, Vertical line {i}")

# Diagonal Wins
diag = [[0, 1, 2, 3], 
        [1, 2, 3, 4],
        [4, 3, 2, 1],
        [3, 2, 1, 0]]
for dline in diag:
  cur = list({board[hline][i] for hline, i in enumerate(dline)})
  if len(cur) == 1:
    possible_wins.append(f"Win for {cur[0]}, Diagonal")

# Stats!
statrolls = []
if argparse(&ARGS&).last('stats'):
  dice = "1d20"
  statrolls = '\n'.join([f"""**`{stat.upper()}:`** {vroll(dice)}""" for stat in STATS])

return f"""-title "{"/".join(title)} {"Multiclass" if len(out) != 1 else "Class"} Absurdity (Maximum {len(out)})" 
           -f "Totals|{" ".join([f"{x[0]} {x[1]}" for x in out.items()])}" 
           -f "Choices|{N.join(["".join(i) for i in board])}"
           -footer "{ctx.prefix}{ctx.alias} <stat> [stat2] [stat3...] [max_classes]\nIf you add `stats` to the args it will roll stats!"
           -f "Connect 4|{"You only got one class!" if len(out)==1 else N.join(possible_wins) if possible_wins else "No wins!"}"
           {f''' -f "Stats|{statrolls}" ''' if statrolls else ""} """
</drac2>
