<drac2>
# Data
spell_gvar  = load_json(get_gvar('5e2c8e11-6ade-4ce2-9ece-562fc9db70c7'))
meta_gvar   = load_json(get_gvar('9af34023-6eba-4789-82b1-e68b191220ac'))
cc          = "Sorcery Points"

# Arguments
args        = &ARGS&

spell_name  = args[0] if args else ''
spell_level = argparse(args).last('l', 0, type_=int)

# If not provided, search through the gvar for that spell
if not spell_level:
  for spell in spell_gvar:
    if spell_name.lower() in spell.name.lower():
      spell_name = spell.name
      spell_level = spell.level
      break
  # If it can't find a spell level, safely error
  else:
    return f"""embed -title "Spell not found!" -desc "Sorry, `{spell_name}` could not be matched to a level in the database. If this is a valid spell (perhaps homebrew?) you can bypass this by specifying a level with `-l #`" """



# Figure out which meta magics we're using
meta_out  = []
meta_cost = 0
for meta in meta_gvar:
  if any([x for x in meta.args if x in args]):
    meta_out.append(meta.out)
    # Min 1 for cantrips
    meta_cost += max(int(get(meta.points, meta.points)),1)

if not character().cc_exists(cc) and meta_cost:
  return f"""embed -title "I'm sorry {ctx.author.display_name}, I can't let you do that." -desc "You are missing a Sorcery Points custom counter. You can either create one yourself (`!help cc create`), or use the [`{ctx.prefix}level` alias](https://avrae.io/dashboard/workshop/5f7385fe647bb0a416316d1d)." """
elif meta_cost:
  if character().cc_exists(cc) and character().get_cc(cc) >= meta_cost:
    # If the character cannot cast the spell at the level specified, safely error before expending sorcery points
    if character().spellbook.get_slots(spell_level) == 0 and not argparse(args).last('i'):
      return f"""embed -title "Cannot cast spell!" -desc "You don't have enough level {spell_level} slots left! Use `-l <level>` to cast at a different level, `!g lr` to take a long rest, or `-i` to ignore spell slots!" """

    character().mod_cc(cc, -meta_cost)
  else:
    return f"""embed -title "I'm sorry {ctx.author.display_name}, I can't let you do that." -desc "You don't have enough Sorcery Points for that." """

cc_out  = f""" -f "{cc} {f'(-{meta_cost})' if meta_cost and character().get_cc(cc) >= meta_cost else ''}|{character().cc_str(cc) if character().cc_exists(cc) else '*None*'}"  """

# If no arguments, return the help
if not args:
  return f"""embed -title "For all your Sorcerer Casting needs!"

-desc "`!scast <\\"spell name\\"> [args]`

Allows the user to cast spells and use meta magic appropriately.

Unfortunately, due to the nature of both meta magic and Avrae, there's no real way to actually apply any of the effects automatically. This alias mostly exists to display the text and subtract Sorcery Points.

For Careful and Heightened meta magic, use target specific args.
For example: `-t or1|pass careful`, or `-t or2|sdis heighten`

For Empowered, you'll need to reroll and apply the difference in damage separately. The alias can't detect the dice rolls of the spells. Sorry.

For Transmute, change the damage type with `-dtype`
For example: `-dtype fire elemental` or `-dtype lightning elemental`

There is currently no support for homebrew spells.

__Valid Arguments__

Anything from `!help cast`

`careful`, `distant`, `empower`, `extend`, `heighten`, `quicken`, `subtle`, `twin`, `elemental`, `seeking`, `unerring` - Displays text for the respective meta magic, and uses the appropriate amount of Sorcery Points." """

# Otherwise, lets cast some magic, baby!
else:
  # Check the spell slot levels and if necessary try to fill out with a font spell slot
  a = argparse(args)
  ignore = ""
  ss_out = ""
  if (character().spellbook.get_slots(spell_level) == 0 and not "i" in a):
    ch,ecc=character(),"Font Spell Level " + spell_level
    if (ch.cc_exists(ecc) and ch.cc(ecc).value > 0):
      ch.mod_cc(ecc,-1)
      ignore = " -i "
      ss_out  = f""" -f "**{ecc}** \n{character().cc_str(ecc)} (-1)"  """


  return f"""cast "{spell_name}" {' '.join([(f'"{i}"' if ' ' in i else i) for i in args[1:]])} {ignore} """ + ' '.join(meta_out) + cc_out + ss_out
</drac2>
