<drac2>
TYPE = "Fey"
SPELL_NAME = "Summon Fey"
SPELL_DESC = "You call forth a fey spirit. It manifests in an unoccupied space that you can see within range. This corporeal form uses the Fey Spirit stat block. When you cast the spell, choose a mood: Fuming, Mirthful, or Tricksy. The creature resembles a fey creature of your choice marked by the chosen mood, which determines one of the traits in its stat block. The creature disappears when it drops to 0 hit points or when the spell ends.\n\nThe creature is an ally to you and your companions. In combat, the creature shares your initiative count, but it takes its turn immediately after yours. It obeys your verbal commands (no action required by you). If you don't issue any, it takes the Dodge action and uses its move to avoid danger."
MIN_LEVEL = 3

using(init_add="f48672c2-8f25-4170-ba39-d5f6ffd38bd3")

args = argparse(["-type"] + &ARGS&)
c = combat()
ch = character()
sab = ch.spellbook.sab
sdc = ch.spellbook.dc
true, false, null = True, False, None

warlock = ch.levels.get('Warlock')
min_slot = max(MIN_LEVEL, ((warlock >= 9) + (warlock >= 7) + (warlock >= 5) + (warlock >= 3) + 1))

if not (c and c.me):
  return f"""embed -title "Woopsie!" -desc "You're not in initiative!" """

spell_level = args.last('l', min_slot, int)
summon_type = args.last('type', "", str).lower()
ignore  = args.last('i')


# Use Class Features:
dur     = 600
rconc   = True
cc      = ''
cc_desc = ''
cc_used = ''
multiplier = 1

# Fey Wanderer: Fey Reinforcements
if 'reinforcement' in &ARGS& or 'reinforcements' in &ARGS&:
  if ch.cc_exists('Fey Reinforcements: Summon Fey'):
    if ignore or ch.get_cc('Fey Reinforcements: Summon Fey'):
      cc = 'Fey Reinforcements: Summon Fey'
      spell_level = MIN_LEVEL
      if not ignore:
        ch.mod_cc(cc, -1)
        cc_used = '(-1)'
      else:
        cc_used = '_use ignored_'
      dur    = 10
      rconc  = False
      ignore = True
      cc_desc= '''You can cast Summon Fey without a Material component. Once per Long Rest, you can cast it without a spell slot.\n\nWhenever you start casting the spell, you can modify it so that it doesn't require Concentration. If you do the spell's duration becomes 1 minute for that casting.'''
    else:
      return f"""embed -title "Woopsie!" -desc "You don't have any more uses of your Fey Reinforcements: Summon Fey ability!\nAdd the `-i` argument if you'd like to bypass using the counter." """
  else:
    return f"""embed -title "Woopsie!" -desc «You don't have a counter called "Fey Reinforcements: Summon Fey"\nIf you create such a counter, you may summon a fey creature with this ability.» """

# Illusionist: Phantasmal Creatures
if 'phantasmal' in &ARGS&:
  if ch.cc_exists('Phantasmal Creatures: Summon Fey'):
    if ignore or ch.get_cc('Phantasmal Creatures: Summon Fey'):
      cc = 'Phantasmal Creatures: Summon Fey'
      spell_level = MIN_LEVEL
      if not ignore:
        ch.mod_cc(cc, -1)
        cc_used = '(-1)'
      else:
        cc_used = '_use ignored_'
      multiplier = 0.5
      ignore     = True
      cc_desc    = '''You always have the Summon Beast and Summon Fey spells prepared. Whenever you cast either spell, you can change its school to Illusion, which causes the summoned creature to appear spectral. You can cast the Illusion version of each spell without expending a spell slot, but casting it without a slot halves the creature’s Hit Points. Once you cast either spell without a spell slot, you must finish a Long Rest before you can cast the spell in that way again.'''
    else:
      return f"""embed -title "Woopsie!" -desc "You don't have any more uses of your Phantsmal Creatures: Summon Fey ability.\nAdd the `-i` argument if you'd like to bypass using the counter." """
  else:
    return f"""embed -title "Woopsie!" -desc «You don't have a counter called "Phantasmal Creatures: Summon Fey"\nIf you create such a counter, you may summon a fey creature with this ability.» """


stat_block = {
  "hp": int((10 * spell_level) * multiplier),
  "ac": 12 + spell_level,
  "pb": proficiencyBonus,
  "strength": 13,
  "dexterity": 16,
  "constitution": 14,
  "intelligence": 14,
  "wisdom": 11,
  "charisma": 16,
  "type": "fey",
}

attacks = [{"name":"Shortsword","automation":[{"type":"target","target":"each","effects":[{"type":"attack","attackBonus":sab,"hit":[{"type":"damage","damage":f"2d6 + 3 + {spell_level} [force]"}],"miss":[],"adv":"0"}]},{"type":"text","text":"*Melee Weapon Attack:* your spell attack modifier to hit, reach 5 ft., one target. *Hit:* 2d6 + 3 + the spell's level force damage."}],"_v":2}]
extra_effects = []
match summon_type:
  case "fuming" | "fume":
    summon_name = "Fuming"
    attacks.extend([{"name":"Fey Step","automation":[{"type":"target","target":"self","effects":[{"type":"ieffect2","name":"Fuming Step","duration":1,"end":True,"desc":"Advantage on the next attack roll before the end of this turn"}]},{"type":"text","text":"The fey magically teleports up to 30 feet to an unoccupied space it can see. Then one of the following effects occurs, based on the fey's chosen mood:\n\n**Fuming.** The fey has advantage on the next attack roll it makes before the end of this turn."}],"_v":2,"verb":"takes","activation_type":3}])
  case "mirthful" | "mirth":
    summon_name = "Mirthful"
    attacks.extend([{"name":"Fey Step","automation":[{"type":"target","target":"each","effects":[{"type":"save","stat":"wis","dc":sdc,"fail":[{"type":"ieffect2","name":"Charmed","duration":10,"desc":"Charmed by {{caster.name}} until it takes any damage","buttons":[{"label":"End Charm","verb":"is no longer charmed","automation":[{"type":"remove_ieffect","removeParent":"if_no_children"},{"type":"text","text":"The affected creature is no longer charmed if it takes any damage."}]}]}],"success":[],"adv":0}]},{"type":"text","text":"The fey magically teleports up to 30 feet to an unoccupied space it can see. Then one of the following effects occurs, based on the fey's chosen mood:\n\n**Mirthful.** The fey can force one creature it can see within 10 feet of it to make a Wisdom saving throw against your spell save DC. Unless the save succeeds, the target is charmed by you and the fey for 1 minute or until the target takes any damage."}],"_v":2,"verb":"takes","activation_type":3}])
  case "tricksy" | "trick":
    summon_name = "Tricksy"
    attacks.extend([{"name":"Fey Step","automation":[{"type":"target","target":"self","effects":[{"type":"ieffect2","name":"Tricksy Step","duration":2,"end":True,"desc":"The fey can fill a 10-foot cube within 5 feet of it with magical darkness, which lasts until the end of its next turn"}]},{"type":"text","text":"The fey magically teleports up to 30 feet to an unoccupied space it can see. Then one of the following effects occurs, based on the fey's chosen mood:\n\n**Tricksy.** The fey can fill a 10-foot cube within 5 feet of it with magical darkness, which lasts until the end of its next turn."}],"_v":2,"verb":"takes","activation_type":3}])
  case _:
    return f"""embed -title "Woopsie!" -desc "You didn't select a type!\n\nChoose from Fuming, Mirthful, Tricksy." """

if not ignore:
  if not ch.spellbook.get_slots(spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have any slots left!" -f "Spell Slots|{ch.spellbook.slots_str(spell_level)}" """
  if not ch.spellbook.can_cast(SPELL_NAME, spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have that spell prepared!" """
  ch.spellbook.use_slot(spell_level)

custom_names = load_yaml(get('summon_names', '{}'))
s_name = args.last('name')
if s_name == 'reset':
  custom_names.pop(summon_name, None)
elif s_name:
  custom_names[summon_name] = s_name
ch.set_cvar('summon_names', dump_yaml(custom_names))
s_name = custom_names.get(summon_name, f"Summoned {summon_name} {TYPE} ({init_add.get_initials(name)})")

group_name = args.last('group', combat().me.group or f"{init_add.get_initials(name)}'s Summons")

stat_block['p'] = True
stat_block['group'] = group_name
stat_block['note'] = f"Summoned by {name}\nMultiattack: {max(1, spell_level//2)}"

c.me.set_group(group_name)
useconc = False if not rconc else ("noconc" not in args)
usedur  = int(args.get("dur",[dur])[0])
c.me.add_effect(f"Summon {TYPE}", concentration=useconc, duration=usedur)

embed_args = {
  "title": f"{name} summoned a {summon_name} {TYPE}!",
  "desc": SPELL_DESC,
  "fields": [{"title": "Spell Slots", "desc": f"{ch.spellbook.slots_str(spell_level)} {'(-1)' if not ignore else ''}"}],
  "footer": f"{ctx.prefix+ctx.alias} | Made by Croebh",
  "color": color,
  "thumb": image
}

if cc:
  embed_args['fields'] = [{"title": cc, "desc": f"{ch.cc_str(cc)} {cc_used}\n\n{cc_desc}"}]

summon_command = init_add.build_init_add(s_name, c.me.init, stat_block)
embed = init_add.build_tembed(**embed_args, init_name=s_name, attacks=attacks, effect_name=f"Summon {TYPE}", extra_effects=extra_effects)

return f"""multiline
{summon_command}
{embed}
"""
</drac2>
